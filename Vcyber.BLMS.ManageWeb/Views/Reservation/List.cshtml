@using PetaPoco
@using Vcyber.BLMS.Common
@using Vcyber.BLMS.Entity.CarService
@using Vcyber.BLMS.Entity.Enum
@using Vcyber.BLMS.Entity.Generated
@model Vcyber.BLMS.Entity.CarService.QueryParamEntity

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "预约管理";
}
@{
    Page<ReservationEntity> list = (Page<ReservationEntity>)ViewData["data"];
}
<link href="~/Scripts/bootstrap-datepicker/datepicker.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-datepicker/bootstrap-datepicker.js"></script>
<script src="~/Scripts/bootstrap-datepicker/bootstrap-datepicker.zh-CN.js"></script>
@using (Html.BeginForm("List", "Reservation", FormMethod.Get, new { @class = "form-horizontal", id = "QueryOrderForm" }))
{
    <div class="form-group col-md-6">
        <label class="col-md-3 control-label">预约类型</label>
        @Html.EnumDropDownListFor(model => model.OrderType, "请选择", new { @class = "col-md-6 text-left form-control" })
    </div>
    <div class="form-group col-md-6">
        <label class="col-md-3 control-label">受理状态</label>
        @Html.EnumDropDownListFor(model => model.State, "请选择", new { @class = "col-md-3 text-left form-control" })
    </div>
    <div class="form-group col-md-6">
        <label class="col-md-3 control-label">导出状态</label>
        @Html.EnumDropDownListFor(model => model.IsExported, "请选择", new { @class = "col-md-3 text-left form-control" })
    </div>
    <div class="form-group col-md-7">
        <label class="col-md-3 control-label">起止时间</label>
        <div class="col-md-3 text-left">
            <input class="form-control datepicker" id="CreateFromDate" name="CreateFromDate" data-date-format="yyyy-mm-dd" value=@Model.CreateFromDate />
        </div>
        <div class="col-md-3 text-left">
            <input class="form-control datepicker" id="CreateToDate" name="CreateToDate" data-date-format="yyyy-mm-dd" value=@Model.CreateToDate />
        </div>
        <script type="text/javascript">
            $('.datepicker').datepicker();
        </script>
    </div>
    @*<div class="form-group col-md-6">
            <label class="col-md-3 control-label">是否已导出</label>
            <select id="IsExported" class="col-md-3 text-left form-control">
                <option value="0">未导出</option>
                <option value="1">已导出</option>
            </select>
        </div>*@
    @*<div class="form-group col-md-6">
            <label class="col-md-3 control-label">受理人</label>
            @Html.EditorFor(model => model.UpdateName, new { htmlAttributes = new { @class = "col-md-3 form-control text-left" } })
            <input type="hidden" id="page" name="page" value="@list.CurrentPage" />
        </div>*@ <input type="hidden" id="page" name="page" value="@list.CurrentPage" />
        <div class="form-group col-md-6">
            <div class="btn-toolbar col-md-3 col-md-offset-3">
                <button style="padding-left:-15px;" type="button" id="btn-submit-cs" class=" btn btn-primary"><i class="fa"></i>查询</button>
            </div>
            <div class="btn-toolbar col-md-4 col-md-offset-1">
                <span>&nbsp;<a class="btn btn-primary" href="@Url.Action("ExportData", "Reservation", new { orderType = Model.OrderType, state = Model.State, isExported = Model.IsExported, createFromDate = Model.CreateFromDate, createToDate = Model.CreateToDate })"><i class=" fa"></i>全部导出</a></span>
            </div>
        </div>
}
<div class="data-container">
    <table class="table">
        <thead>
            <tr>
                <th>序号</th>
                <th>预约类型</th>
                <th>预约时间</th>
                <th>电话</th>
                <th>姓名</th>
                <th>店代码</th>
                <th>提交时间</th>
                @*<th>受理人</th>
                    <th>受理时间</th>*@
                <th>受理状态</th>
                <th>操作</th>
                <th>是否已导出</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < list.Items.Count; i++)
            {
                var entity = list.Items[i];

                string scheduleDate = string.Empty;
                if (entity.ScheduleDate != null) { scheduleDate = ((DateTime)entity.ScheduleDate).ToString("yyyy/MM/dd"); }

                string type = string.Empty;
                string updateAction = string.Empty;
                string detailAction = string.Empty;
                switch (Model.OrderType)
                {
                    case EOrderType.CommonMaintain:
                        type = "预约维保";
                        //updateAction = "SonataService";
                        detailAction = "ScheduleMaintDetail";
                        break;
                    case EOrderType.Home2Home:
                        type = "免费取送车服务";
                        //updateAction = "SonataService";
                        detailAction = "HomeToHomeDetail";
                        break;
                    case EOrderType.OrderCar:
                        type = "线上订车";
                        // updateAction = "OrderCar";
                        detailAction = "OrderCarDetail";
                        break;
                    case EOrderType.TestDrive:
                        type = "预约试驾";
                        // updateAction = "TestDrive";
                        detailAction = "TestDriveDetail";
                        break;
                    case EOrderType.Care:
                        type = "上门关怀服务";
                        //updateAction = "SonataService";
                        detailAction = "DayCareDetail";
                        break;
                    case EOrderType.SpecialMaintain:
                        type = "一对一专享服务";
                        //updateAction = "SonataService";
                        detailAction = "OneOneDetail";
                        break;
                    case EOrderType.FreeCheck:
                        type = "3年9次免检服务";
                        //updateAction = "SonataService";
                        detailAction = "YearTimeDetail";
                        break;
                    case EOrderType.LongDistanceTravel:
                        type = "长途旅行关怀服务";
                        detailAction = "YearTimeDetail";
                        break;
                }
                <tr>
                    <td>@(i + 1)</td>
                    <td>@type</td>
                    <td>@scheduleDate</td>
                    <td>@entity.Phone</td>
                    <td>@entity.UserName</td>
                    <td>@entity.DealerId</td>
                    <td>@entity.CreateTime</td>
                    @*<td>@entity.UpdateName</td>
                        <td>@entity.UpdateTime.ToString("yyyy-MM-dd HH:mm")</td>*@
                    @*@{
                        if (state == EOrderState.Processed)
                        {
                            <td>
                                已受理
                            </td>
                        }
                        else
                        {
                            <td>
                                <a title="编辑" href="javascript:if(confirm('确定受理吗?'))location='@Url.Action("update", @updateAction, new { id = entity.Id, reservationType=Model.ReservationType,updatename=Model.UpdateName, state = Model.State, page = list.CurrentPage, itemsperpage = list.ItemsPerPage })'">
                                    待受理
                                </a>
                            </td>
                        }

                            }*@
                    <td>@(((EOrderState)(entity.State)).DisplayName())</td>
                    <td>
                        <a title="详情" href="@Url.Action(@detailAction, new { id = entity.Id, reservationType = Model.OrderType, updatename = Model.UpdateName, state = Model.State, page = list.CurrentPage, itemsperpage = list.ItemsPerPage })'">
                            详情
                        </a>
                    </td>
                    <td>
                        @{
                if ((entity.IsExported ?? 0) == 0)
                {
                    <label>未导出</label>
                }
                else
                {<label>已导出</label>
                }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div>
    <div style="float:left">总共:@list.TotalItems</div>
    <div style="float: right; margin-right: 10px; margin-top: 5px; line-height: 25px;" class="ngPagerControl">
        <button type="button" onclick=" pageToFirst() " class="ngPagerButton" title="First Page">
            <div class="ngPagerFirstTriangle">
                <div class="ngPagerFirstBar"></div>
            </div>
        </button>
        <button type="button" onclick=" pageBackward() " class="ngPagerButton" title="Previous Page">
            <div class="ngPagerFirstTriangle ngPagerPrevTriangle"></div>
        </button>
        <input id="incurrpage" type="number" style="width: 50px; height: 24px; margin-top: 1px; padding: 0 4px;" value="@list.CurrentPage" onchange=" inputCurrentPage() ">
        <span class="ngGridMaxPagesNumber">/@list.TotalPages</span>
        <button type="button" onclick=" pageForward() " class="ngPagerButton" title="Next Page">
            <div class="ngPagerLastTriangle ngPagerNextTriangle"></div>
        </button>
        <button type="button" onclick=" pageToLast() " class="ngPagerButton" title="Last Page">
            <div class="ngPagerLastTriangle">
                <div class="ngPagerLastBar"></div>
            </div>
        </button>
    </div>
</div>


<script type="text/javascript">
    $('#btn-submit-cs').click(function () {
        //ChangePageByValue();
        $('#QueryOrderForm').submit();
    });
    function pageToFirst() {
        $("#page").val("1");
        $("#QueryOrderForm").submit();
    }
    $(function () {
        $('#state').val("@Model.State");
    });
    function pageBackward() {
        @{
                long pageIndexBackward = list.CurrentPage - 1;
                if (pageIndexBackward < 1) { pageIndexBackward = 1; }
             }
        $("#page").val("@pageIndexBackward");
        $("#QueryOrderForm").submit();
    }

    function pageForward() {
        @{
                long pageIndexForward = list.CurrentPage + 1;
                if (pageIndexForward > list.TotalPages) { pageIndexForward = list.TotalPages; }
             }
        $("#page").val("@pageIndexForward");
        $("#QueryOrderForm").submit();
    }

    function pageToLast() {
        $("#page").val("@list.TotalPages");
        $("#QueryOrderForm").submit();
    }

    function inputCurrentPage() {
        var currentpage = $("#incurrpage").val();
        if (currentpage > "@(list.TotalPages)") {
            $("#page").val("@list.TotalPages");
        }
        else if (currentpage < 1 && "@(list.TotalPages)" > 0) {
            $("#page").val(1);
        }
        else if (currentpage < 0) {
            $("#page").val(0);
        }
        else {
            $("#page").val($("#incurrpage").val());
        }
        $("#QueryOrderForm").submit();
    }
    @*function ChangePageByValue() {
        var beforeValue = "@Model.OrderType";
        var currentValue = $("#OrderType option:selected").val();
        if (beforeValue != currentValue) {
            $("#page").val("1");
        }
    }*@
</script>
